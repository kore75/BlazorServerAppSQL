@using Microsoft.EntityFrameworkCore
@using System.Collections
@inherits DataAdaptor
@inject BookingDataContext Context

@code {
    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }


    public async override Task<object> ReadAsync(DataManagerRequest dataManagerRequest, string additionalParam = "")
    {
        int TotalRecordsCount = await Context.UserDatas.AsNoTracking().CountAsync();
        IQueryable<UserData> userDatas = Context.UserDatas.AsNoTracking();



        if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
        {
            // Searching
            userDatas = DataOperations.PerformSearching(userDatas, dataManagerRequest.Search);
        }

        if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
        {
            // Filtering
            userDatas = DataOperations.PerformFiltering(userDatas, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            //Add custom logic here if needed and remove above method
        }

        if (dataManagerRequest.Sorted != null && dataManagerRequest.Sorted.Count > 0)
        {
            // Sorting
            userDatas = DataOperations.PerformSorting(userDatas, dataManagerRequest.Sorted);
            //Add custom logic here if needed and remove above method
        }

        if (dataManagerRequest.Skip != 0)
        {
            // Paging
            userDatas = DataOperations.PerformSkip(userDatas, dataManagerRequest.Skip);
            //Add custom logic here if needed and remove above method
        }
        if (dataManagerRequest.Take != 0)
        {
            // Taking
            userDatas = DataOperations.PerformTake(userDatas, dataManagerRequest.Take);
            //Add custom logic here if needed and remove above method
        }       

        return dataManagerRequest.RequiresCounts ? new DataResult() { Result = userDatas, Count = TotalRecordsCount } : (object)(userDatas);
    }

    public override async Task<object> InsertAsync(DataManager dataManager, object record, string additionalParam)
    {
        if (record is UserData newUserData)
        {
            await Context.UserDatas.AddAsync(newUserData);
            await Context.SaveChangesAsync();
            Context.Entry(newUserData).State = EntityState.Detached;
            return newUserData;
        }
        throw new IndexOutOfRangeException();
    }

    public override async Task<object> UpdateAsync(DataManager dataManager, object record, string primaryColumnName, string additionalParam)
    {
        if (record is UserData changedUserData)
        {
            //Context.UserDatas.Update(changedUserData);
            Context.Attach(changedUserData);
            Context.Entry(changedUserData).State = EntityState.Modified;
            await Context.SaveChangesAsync();
            Context.Entry(changedUserData).State = EntityState.Detached;
            return changedUserData;
        }
        throw new IndexOutOfRangeException();
    }

    // Performs Remove operation
    public override object Remove(DataManager dataManager, object value, string keyField, string key)
    {
        if (value != null)
        {
            UserData udata = new UserData { UserDataId = int.Parse(value.ToString()) };
            Context.UserDatas.Attach(udata);
            Context.Entry(udata).State = EntityState.Deleted;
            Context.SaveChanges();
            Context.Entry(udata).State = EntityState.Detached;
        }

        return value;
    }

}
