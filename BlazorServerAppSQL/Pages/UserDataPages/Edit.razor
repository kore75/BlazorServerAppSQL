@page "/UserData/edit"
@inject BlazorServerAppSQL.Model.BookingDataContext DB
@using BlazorServerAppSQL.Model
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>UserData</h4>
<hr />
@if (UserData is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="UserData" OnValidSubmit="UpdateUserData" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="UserData.UserDataId" value="@UserData.UserDataId" />
                <div class="mb-3">
                    <label for="fullname" class="form-label">FullName:</label>
                    <InputText id="fullname" @bind-Value="UserData.FullName" class="form-control" />
                    <ValidationMessage For="() => UserData.FullName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email:</label>
                    <InputText id="email" @bind-Value="UserData.Email" class="form-control" />
                    <ValidationMessage For="() => UserData.Email" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="employmentdate" class="form-label">EmploymentDate:</label>
                    <InputDate id="employmentdate" @bind-Value="UserData.EmploymentDate" class="form-control" />
                    <ValidationMessage For="() => UserData.EmploymentDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="salaray" class="form-label">Salary:</label>
                    <InputNumber id="salaray" @bind-Value="UserData.Salary" class="form-control" />
                    <ValidationMessage For="() => UserData.Salary" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="usercategory_id" class="form-label">UserCategory_Id:</label>
                    <InputNumber id="usercategory_id" @bind-Value="UserData.UserCategory_Id" class="form-control" />
                    <ValidationMessage For="() => UserData.UserCategory_Id" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/userdata">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int UserDataId { get; set; }

    [SupplyParameterFromForm]
    public UserData? UserData { get; set; }

    protected override async Task OnInitializedAsync()
    {
        UserData ??= await DB.UserDatas.FirstOrDefaultAsync(m => m.UserDataId == UserDataId);

        if (UserData is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateUserData()
    {
        DB.Attach(UserData!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!UserDataExists(UserData!.UserDataId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/userdata");
    }

    bool UserDataExists(int userdataid)
    {
        return DB.UserDatas.Any(e => e.UserDataId == userdataid);
    }
}
